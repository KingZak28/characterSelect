{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","containers/actions.js","containers/constants.js","containers/reducers.js","serviceWorker.js","index.js"],"names":["Card","name","special","imgUrl","className","alt","src","height","width","CardList","characters","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","App","this","onRequestCharacters","searchField","onSearchChange","filteredChars","filter","character","toLowerCase","includes","length","Component","connect","state","searchCharacters","requestCharacters","isPending","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateCharacters","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebfed7d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,special,imgUrl} ) => {\r\n  return(\r\n    <div className = 'tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow5'>\r\n      <img alt='Zoro' src={imgUrl} height=\"300\" width =\"300\"/>\r\n      <div>\r\n        <h2> {name}</h2>\r\n        <h3> {special}</h3>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({characters}) =>{\r\n  return(\r\n    <div>\r\n      { characters.map((user, i)=> {\r\n          return(\r\n          <Card\r\n            key = {i}\r\n            name={characters[i].name}\r\n            special = {characters[i].special}\r\n            imgUrl = {characters[i].imgUrl}\r\n           /> //You should include a key prop to minimize DOM work when doing loops.\r\n        );\r\n      })\r\n    }\r\n    </div>\r\n);\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <div className=\"pa2\">\r\n      <input\r\n        className = \"pa3 ba bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder = \"Search...\"\r\n        onChange = {searchChange}\r\n       />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n//This component illustrates the use of children in React. props.children\r\nconst Scroll = (props) => {\r\n\r\n  return(\r\n    //Can add styling by creating a scroll.css but can also do it inline like this in JSX with {{}} meaning this is a js object and within that were returning\r\n    //An object and this object can have CSS styles such as overflows.\r\n    <div style= {{overflowY: 'scroll', border:\"5px ridge black\", height: \"750px\"}}>\r\n\r\n      {props.children}\r\n\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n//This makes the container aware of the state and be able to subscribe to changes in the state.\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\n//import characters from './characters'; //Gonna use an API now so don't need to import characters manually\r\nimport SearchBox from '../components//SearchBox';\r\nimport Scroll from '../components//Scroll';\r\nimport './App.css'\r\nimport {setSearchField, requestCharacters} from './actions';\r\n\r\n//Standard name for the prop to the connect function\r\nconst mapStateToProps = state => {\r\n  return {\r\n    //The searchfield will be the state of the searchfield that comes from our reducer\r\n    //Remember in index.js we destructure the reducer as searchCharacters when we create our store\r\n    //Right now since we're using search characters as our only reducer we don't need to route but other wise we'd have to do\r\n    //something like state.searchCharacters.searchField to get the props value.\r\n    searchField: state.searchCharacters.searchField,\r\n    characters: state.requestCharacters.characters,\r\n    isPending: state.requestCharacters.isPending,\r\n    error: state.requestCharacters.error\r\n  }\r\n}\r\n\r\n//Dispatch is what triggers an action to be sent to a reducer\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //A prop we have called onSearchChange which is itself a function that recieves event as a params\r\n  //And returns a function to dispatch the setSearchField action so that the reducer becomes aware\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    //We have below a higher order function dispatch takes in another func requestCharacters\r\n    onRequestCharacters: () => dispatch(requestCharacters())\r\n  }\r\n}\r\n\r\n\r\n//Containers are smart components that contain state\r\nclass App extends Component {\r\n  //Constructors used to create state when not using redux\r\n  // constructor() {\r\n  //   super()\r\n  //   this.state = {\r\n  //     characters: [],\r\n  //\r\n  //   }\r\n    //Our App has two states characters and searchfield and any component that uses state has the class syntax form.\r\n    //Our state is what changes in our app, the state is used by the virtual DOM to render. The state can pass down props like we did with onSearchChange\r\n    //The onSearchChange method updated the state of the searchfield to whatever was inputted by the user( event.target.value);\r\n    //Once we recieved this value we can then filter the characters state to only include what was typed in by the user.\r\n    //Components that have state are called smart components and they usually have the class syntax\r\n  // }\r\n\r\n//Built in react funcs don't need arrows\r\n  componentDidMount(){\r\n    this.props.onRequestCharacters();\r\n\r\n  }\r\n\r\n//Whenever you make your own methods in react use the arrow functions so the context of this is in the right place.\r\n  // onSearchChange = (event) =>{\r\n  //   this.setState({searchfield: event.target.value});\r\n  //\r\n  // }\r\n\r\n\r\n  render(){\r\n    const {characters, searchField,onSearchChange} = this.props;\r\n    const filteredChars = characters.filter(character =>{\r\n      return character.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    if(!characters.length){\r\n      return <h1 className = \"tc f1\"> Loading...</h1>\r\n    }\r\n    return(\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\"> Character Select </h1>\r\n        <SearchBox searchChange = {onSearchChange} />\r\n        <Scroll>\r\n          <CardList characters = {filteredChars}/>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n//Connect is a higher order function, a function that returns another function so connect will run and then return\r\n//The second part that will then render the App container\r\n//\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD,\r\n  REQUEST_CHARACTERS_PENDING,\r\n  REQUEST_CHARACTERS_SUCCESS,\r\n  REQUEST_CHARACTERS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})\r\n\r\n//asynchronous action\r\n// We can use redux thunk middleware to return functions and our asynch request is a function and not an object like setSearchField\r\nexport const requestCharacters = () => (dispatch) => {\r\n  dispatch({type: REQUEST_CHARACTERS_PENDING})\r\n  fetch('https://my-json-server.typicode.com/KingZak28/demo/Characters')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_CHARACTERS_SUCCESS, payload: data}))\r\n    .catch(err => dispatch({type: REQUEST_CHARACTERS_FAILED, payload: err}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//Because this is a promise it has three states\r\nexport const REQUEST_CHARACTERS_PENDING  = 'REQUEST_CHARACTERS_PENDING';\r\nexport const REQUEST_CHARACTERS_SUCCESS  = 'REQUEST_CHARACTERS_SUCCESS';\r\nexport const REQUEST_CHARACTERS_FAILED  = 'REQUEST_CHARACTERS_FAILED';\r\n","import {CHANGE_SEARCH_FIELD,\r\n  REQUEST_CHARACTERS_PENDING,\r\n  REQUEST_CHARACTERS_SUCCESS,\r\n  REQUEST_CHARACTERS_FAILED\r\n} from './constants';\r\n\r\n//Our initial state is the redux store for the search characters reducer.\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\n//Our reducer for the search characters action, a reducer (a pure function in and of itself) will take in the actionand produce the state\r\n//We give our reducer default parameters incase it is empty\r\nexport const searchCharacters = (state = initialStateSearch,action={}) => {\r\n  //We set this in the action.js file\r\n  switch(action.type){\r\n    case CHANGE_SEARCH_FIELD:\r\n      //We're returning a new state because state is read only we can't modigfy the old state\r\n      // In the new state were updating the searchfield with the new payload specified by the user in the action\r\n      //Object.assign({},state,{searchField: action.payload}) is the same as we have below its just using new spread operator.\r\n      return {...state, searchField: action.payload}\r\n    default:\r\n    return state;\r\n  }\r\n}\r\n\r\n//Because the initial state is read only we don't update the search state and create a new one for characters\r\nconst initialStateCharacters = {\r\n  isPending: false,\r\n  characters: [],\r\n  error: ''\r\n}\r\n//The request characters reducer\r\nexport const requestCharacters = (state=initialStateCharacters,action={}) =>{\r\n  switch(action.type){\r\n    case REQUEST_CHARACTERS_PENDING:\r\n      return {...state,isPending: true}\r\n    case REQUEST_CHARACTERS_SUCCESS:\r\n      return {...state,isPending:false,characters:action.payload}\r\n    case REQUEST_CHARACTERS_FAILED:\r\n      return {...state,isPending:false, error:action.payload}\r\n    default:\r\n    return state\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\n// import Card from './Card';\n// import CardList from './CardList'\nimport App from './containers/App'\nimport 'tachyons'\nimport {searchCharacters, requestCharacters} from './containers/reducers';\nimport * as serviceWorker from './serviceWorker';\n// import {characters} from \"./characters\"; //Have to destructure because I used exports and not exports default\n\n//Creating our Redux store here\n//Generally you'll have a root reducer to combine your multiple reducers\nconst rootReducer = combineReducers({searchCharacters, requestCharacters});\nconst logger = createLogger();\n//applyMiddleware is has ordered params so thunk will run first\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\n\n//Because we don't want to pass the store down the component tree over and over\n//So we wrap the app component in the provider component which passes down the store to it's children\nReactDOM.render(\n  <Provider store ={store} >\n    <App />\n  </Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}